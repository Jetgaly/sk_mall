// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0
// Source: order_consumer.proto

package server

import (
	"context"

	"sk_mall/rpc/cron/order_consumer/internal/logic"
	"sk_mall/rpc/cron/order_consumer/internal/svc"
	"sk_mall/rpc/cron/order_consumer/types"
)

type OrderConsumerServer struct {
	svcCtx *svc.ServiceContext
	__.UnimplementedOrderConsumerServer
}

func NewOrderConsumerServer(svcCtx *svc.ServiceContext) *OrderConsumerServer {
	return &OrderConsumerServer{
		svcCtx: svcCtx,
	}
}

func (s *OrderConsumerServer) Ping(ctx context.Context, in *__.Empty) (*__.Pong, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}

func (s *OrderConsumerServer) SetOrderHasPaid(ctx context.Context, in *__.SetOrderHasPaidReq) (*__.SetOrderHasPaidResp, error) {
	l := logic.NewSetOrderHasPaidLogic(ctx, s.svcCtx)
	return l.SetOrderHasPaid(in)
}

func (s *OrderConsumerServer) ComSetOrderHasPaid(ctx context.Context, in *__.SetOrderHasPaidReq) (*__.SetOrderHasPaidResp, error) {
	l := logic.NewComSetOrderHasPaidLogic(ctx, s.svcCtx)
	return l.ComSetOrderHasPaid(in)
}
