// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0
// Source: order_consumer.proto

package orderconsumer

import (
	"context"

	"sk_mall/rpc/cron/order_consumer/types"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseResp            = __.BaseResp
	Empty               = __.Empty
	Pong                = __.Pong
	SetOrderHasPaidReq  = __.SetOrderHasPaidReq
	SetOrderHasPaidResp = __.SetOrderHasPaidResp

	OrderConsumer interface {
		Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pong, error)
		SetOrderHasPaid(ctx context.Context, in *SetOrderHasPaidReq, opts ...grpc.CallOption) (*SetOrderHasPaidResp, error)
		ComSetOrderHasPaid(ctx context.Context, in *SetOrderHasPaidReq, opts ...grpc.CallOption) (*SetOrderHasPaidResp, error)
	}

	defaultOrderConsumer struct {
		cli zrpc.Client
	}
)

func NewOrderConsumer(cli zrpc.Client) OrderConsumer {
	return &defaultOrderConsumer{
		cli: cli,
	}
}

func (m *defaultOrderConsumer) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pong, error) {
	client := __.NewOrderConsumerClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultOrderConsumer) SetOrderHasPaid(ctx context.Context, in *SetOrderHasPaidReq, opts ...grpc.CallOption) (*SetOrderHasPaidResp, error) {
	client := __.NewOrderConsumerClient(m.cli.Conn())
	return client.SetOrderHasPaid(ctx, in, opts...)
}

func (m *defaultOrderConsumer) ComSetOrderHasPaid(ctx context.Context, in *SetOrderHasPaidReq, opts ...grpc.CallOption) (*SetOrderHasPaidResp, error) {
	client := __.NewOrderConsumerClient(m.cli.Conn())
	return client.ComSetOrderHasPaid(ctx, in, opts...)
}
