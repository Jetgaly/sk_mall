// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0
// Source: product.proto

package product

import (
	"context"

	"sk_mall/rpc/rpc_product/types"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseResp                 = __.BaseResp
	CreateProductReq         = __.CreateProductReq
	CreateProductResp        = __.CreateProductResp
	CreateSKEventReq         = __.CreateSKEventReq
	CreateSKEventResp        = __.CreateSKEventResp
	CreateSKProductReq       = __.CreateSKProductReq
	CreateSKProductResp      = __.CreateSKProductResp
	GetSKEvStatusByPIdReq    = __.GetSKEvStatusByPIdReq
	GetSKEvStatusByPIdResp   = __.GetSKEvStatusByPIdResp
	GetSKEvStatusReq         = __.GetSKEvStatusReq
	GetSKEvStatusResp        = __.GetSKEvStatusResp
	GetSKProductReq          = __.GetSKProductReq
	GetSKProductResp         = __.GetSKProductResp
	ReduceSkProductStockReq  = __.ReduceSkProductStockReq
	ReduceSkProductStockResp = __.ReduceSkProductStockResp
	SKProductInfo            = __.SKProductInfo

	Product interface {
		CreateProduct(ctx context.Context, in *CreateProductReq, opts ...grpc.CallOption) (*CreateProductResp, error)
		CreateSKEvent(ctx context.Context, in *CreateSKEventReq, opts ...grpc.CallOption) (*CreateSKEventResp, error)
		CreateSKProduct(ctx context.Context, in *CreateSKProductReq, opts ...grpc.CallOption) (*CreateSKProductResp, error)
		// rpc GetProduct(GetProductReq) returns(GetProductResp);
		GetSKProduct(ctx context.Context, in *GetSKProductReq, opts ...grpc.CallOption) (*GetSKProductResp, error)
		GetSKEvStatusByPId(ctx context.Context, in *GetSKEvStatusByPIdReq, opts ...grpc.CallOption) (*GetSKEvStatusByPIdResp, error)
		GetSKEvStatus(ctx context.Context, in *GetSKEvStatusReq, opts ...grpc.CallOption) (*GetSKEvStatusResp, error)
		ReduceSkProductStock(ctx context.Context, in *ReduceSkProductStockReq, opts ...grpc.CallOption) (*ReduceSkProductStockResp, error)
		ComReduceSkProductStock(ctx context.Context, in *ReduceSkProductStockReq, opts ...grpc.CallOption) (*ReduceSkProductStockResp, error)
	}

	defaultProduct struct {
		cli zrpc.Client
	}
)

func NewProduct(cli zrpc.Client) Product {
	return &defaultProduct{
		cli: cli,
	}
}

func (m *defaultProduct) CreateProduct(ctx context.Context, in *CreateProductReq, opts ...grpc.CallOption) (*CreateProductResp, error) {
	client := __.NewProductClient(m.cli.Conn())
	return client.CreateProduct(ctx, in, opts...)
}

func (m *defaultProduct) CreateSKEvent(ctx context.Context, in *CreateSKEventReq, opts ...grpc.CallOption) (*CreateSKEventResp, error) {
	client := __.NewProductClient(m.cli.Conn())
	return client.CreateSKEvent(ctx, in, opts...)
}

func (m *defaultProduct) CreateSKProduct(ctx context.Context, in *CreateSKProductReq, opts ...grpc.CallOption) (*CreateSKProductResp, error) {
	client := __.NewProductClient(m.cli.Conn())
	return client.CreateSKProduct(ctx, in, opts...)
}

// rpc GetProduct(GetProductReq) returns(GetProductResp);
func (m *defaultProduct) GetSKProduct(ctx context.Context, in *GetSKProductReq, opts ...grpc.CallOption) (*GetSKProductResp, error) {
	client := __.NewProductClient(m.cli.Conn())
	return client.GetSKProduct(ctx, in, opts...)
}

func (m *defaultProduct) GetSKEvStatusByPId(ctx context.Context, in *GetSKEvStatusByPIdReq, opts ...grpc.CallOption) (*GetSKEvStatusByPIdResp, error) {
	client := __.NewProductClient(m.cli.Conn())
	return client.GetSKEvStatusByPId(ctx, in, opts...)
}

func (m *defaultProduct) GetSKEvStatus(ctx context.Context, in *GetSKEvStatusReq, opts ...grpc.CallOption) (*GetSKEvStatusResp, error) {
	client := __.NewProductClient(m.cli.Conn())
	return client.GetSKEvStatus(ctx, in, opts...)
}

func (m *defaultProduct) ReduceSkProductStock(ctx context.Context, in *ReduceSkProductStockReq, opts ...grpc.CallOption) (*ReduceSkProductStockResp, error) {
	client := __.NewProductClient(m.cli.Conn())
	return client.ReduceSkProductStock(ctx, in, opts...)
}

func (m *defaultProduct) ComReduceSkProductStock(ctx context.Context, in *ReduceSkProductStockReq, opts ...grpc.CallOption) (*ReduceSkProductStockResp, error) {
	client := __.NewProductClient(m.cli.Conn())
	return client.ComReduceSkProductStock(ctx, in, opts...)
}
