// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0
// Source: product.proto

package server

import (
	"context"

	"sk_mall/rpc/rpc_product/internal/logic"
	"sk_mall/rpc/rpc_product/internal/svc"
	"sk_mall/rpc/rpc_product/types"
)

type ProductServer struct {
	svcCtx *svc.ServiceContext
	__.UnimplementedProductServer
}

func NewProductServer(svcCtx *svc.ServiceContext) *ProductServer {
	return &ProductServer{
		svcCtx: svcCtx,
	}
}

func (s *ProductServer) CreateProduct(ctx context.Context, in *__.CreateProductReq) (*__.CreateProductResp, error) {
	l := logic.NewCreateProductLogic(ctx, s.svcCtx)
	return l.CreateProduct(in)
}

func (s *ProductServer) CreateSKEvent(ctx context.Context, in *__.CreateSKEventReq) (*__.CreateSKEventResp, error) {
	l := logic.NewCreateSKEventLogic(ctx, s.svcCtx)
	return l.CreateSKEvent(in)
}

func (s *ProductServer) CreateSKProduct(ctx context.Context, in *__.CreateSKProductReq) (*__.CreateSKProductResp, error) {
	l := logic.NewCreateSKProductLogic(ctx, s.svcCtx)
	return l.CreateSKProduct(in)
}

// rpc GetProduct(GetProductReq) returns(GetProductResp);
func (s *ProductServer) GetSKProduct(ctx context.Context, in *__.GetSKProductReq) (*__.GetSKProductResp, error) {
	l := logic.NewGetSKProductLogic(ctx, s.svcCtx)
	return l.GetSKProduct(in)
}

func (s *ProductServer) GetSKEvStatusByPId(ctx context.Context, in *__.GetSKEvStatusByPIdReq) (*__.GetSKEvStatusByPIdResp, error) {
	l := logic.NewGetSKEvStatusByPIdLogic(ctx, s.svcCtx)
	return l.GetSKEvStatusByPId(in)
}

func (s *ProductServer) GetSKEvStatus(ctx context.Context, in *__.GetSKEvStatusReq) (*__.GetSKEvStatusResp, error) {
	l := logic.NewGetSKEvStatusLogic(ctx, s.svcCtx)
	return l.GetSKEvStatus(in)
}

func (s *ProductServer) ReduceSkProductStock(ctx context.Context, in *__.ReduceSkProductStockReq) (*__.ReduceSkProductStockResp, error) {
	l := logic.NewReduceSkProductStockLogic(ctx, s.svcCtx)
	return l.ReduceSkProductStock(in)
}

func (s *ProductServer) ComReduceSkProductStock(ctx context.Context, in *__.ReduceSkProductStockReq) (*__.ReduceSkProductStockResp, error) {
	l := logic.NewComReduceSkProductStockLogic(ctx, s.svcCtx)
	return l.ComReduceSkProductStock(in)
}

func (s *ProductServer) GetSkproductList(ctx context.Context, in *__.GetSkproductListReq) (*__.GetSkproductListResp, error) {
	l := logic.NewGetSkproductListLogic(ctx, s.svcCtx)
	return l.GetSkproductList(in)
}
