// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0
// Source: order.proto

package order

import (
	"context"

	"sk_mall/rpc/rpc_order/types"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseResp         = __.BaseResp
	GetOrderListReq  = __.GetOrderListReq
	GetOrderListResp = __.GetOrderListResp
	GetOrderReq      = __.GetOrderReq
	GetOrderResp     = __.GetOrderResp
	OrderInfo        = __.OrderInfo
	OrderListInfo    = __.OrderListInfo

	Order interface {
		GetOrder(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*GetOrderResp, error)
		GetOrderList(ctx context.Context, in *GetOrderListReq, opts ...grpc.CallOption) (*GetOrderListResp, error)
	}

	defaultOrder struct {
		cli zrpc.Client
	}
)

func NewOrder(cli zrpc.Client) Order {
	return &defaultOrder{
		cli: cli,
	}
}

func (m *defaultOrder) GetOrder(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*GetOrderResp, error) {
	client := __.NewOrderClient(m.cli.Conn())
	return client.GetOrder(ctx, in, opts...)
}

func (m *defaultOrder) GetOrderList(ctx context.Context, in *GetOrderListReq, opts ...grpc.CallOption) (*GetOrderListResp, error) {
	client := __.NewOrderClient(m.cli.Conn())
	return client.GetOrderList(ctx, in, opts...)
}
