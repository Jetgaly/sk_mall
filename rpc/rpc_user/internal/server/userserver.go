// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0
// Source: user.proto

package server

import (
	"context"

	"sk_mall/rpc/rpc_user/internal/logic"
	"sk_mall/rpc/rpc_user/internal/svc"
	"sk_mall/rpc/rpc_user/types"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	__.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) CreateUser(ctx context.Context, in *__.CreateUserReq) (*__.CreateUserResp, error) {
	l := logic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

func (s *UserServer) GetUserById(ctx context.Context, in *__.GetUserByIdReq) (*__.GetUserByIdResp, error) {
	l := logic.NewGetUserByIdLogic(ctx, s.svcCtx)
	return l.GetUserById(in)
}

func (s *UserServer) ChangeUserPwd(ctx context.Context, in *__.ChangeUserPwdReq) (*__.ChangeUserPwdResp, error) {
	l := logic.NewChangeUserPwdLogic(ctx, s.svcCtx)
	return l.ChangeUserPwd(in)
}

func (s *UserServer) ChangeUserNickname(ctx context.Context, in *__.ChangeUserNicknameReq) (*__.ChangeUserNicknameResp, error) {
	l := logic.NewChangeUserNicknameLogic(ctx, s.svcCtx)
	return l.ChangeUserNickname(in)
}

func (s *UserServer) CreateUserAddrsById(ctx context.Context, in *__.CreateAddrsByIdReq) (*__.CreateAddrsByIdResp, error) {
	l := logic.NewCreateUserAddrsByIdLogic(ctx, s.svcCtx)
	return l.CreateUserAddrsById(in)
}

func (s *UserServer) GetUserAddrsById(ctx context.Context, in *__.GetAddrsByIdReq) (*__.GetAddrsByIdResp, error) {
	l := logic.NewGetUserAddrsByIdLogic(ctx, s.svcCtx)
	return l.GetUserAddrsById(in)
}

func (s *UserServer) DeleteAddrByAddrId(ctx context.Context, in *__.DeleteAddrByAddrIdReq) (*__.DeleteAddrByAddrIdResp, error) {
	l := logic.NewDeleteAddrByAddrIdLogic(ctx, s.svcCtx)
	return l.DeleteAddrByAddrId(in)
}

func (s *UserServer) IncreaseBalance(ctx context.Context, in *__.IncreaseBalanceReq) (*__.IncreaseBalanceResq, error) {
	l := logic.NewIncreaseBalanceLogic(ctx, s.svcCtx)
	return l.IncreaseBalance(in)
}

func (s *UserServer) GetEmailCode(ctx context.Context, in *__.GetEmailCodeReq) (*__.GetEmailCodeResp, error) {
	l := logic.NewGetEmailCodeLogic(ctx, s.svcCtx)
	return l.GetEmailCode(in)
}

func (s *UserServer) FrozenBalance(ctx context.Context, in *__.FrozenBalanceReq) (*__.FrozenBalanceResq, error) {
	l := logic.NewFrozenBalanceLogic(ctx, s.svcCtx)
	return l.FrozenBalance(in)
}

func (s *UserServer) ReduceFrozenBalance(ctx context.Context, in *__.ReduceFrozenBalanceReq) (*__.ReduceFrozenBalanceResp, error) {
	l := logic.NewReduceFrozenBalanceLogic(ctx, s.svcCtx)
	return l.ReduceFrozenBalance(in)
}

func (s *UserServer) ComReduceFrozenBalance(ctx context.Context, in *__.ReduceFrozenBalanceReq) (*__.ReduceFrozenBalanceResp, error) {
	l := logic.NewComReduceFrozenBalanceLogic(ctx, s.svcCtx)
	return l.ComReduceFrozenBalance(in)
}

func (s *UserServer) GetFrozenInfo(ctx context.Context, in *__.GetFrozenInfoReq) (*__.GetFrozenInfoResp, error) {
	l := logic.NewGetFrozenInfoLogic(ctx, s.svcCtx)
	return l.GetFrozenInfo(in)
}

func (s *UserServer) Login(ctx context.Context, in *__.LoginReq) (*__.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UserServer) JwtAuth(ctx context.Context, in *__.JwtAuthReq) (*__.JwtAuthResp, error) {
	l := logic.NewJwtAuthLogic(ctx, s.svcCtx)
	return l.JwtAuth(in)
}
