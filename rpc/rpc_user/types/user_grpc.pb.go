// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: user.proto

// proto 包名

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	User_CreateUser_FullMethodName             = "/user.User/CreateUser"
	User_GetUserById_FullMethodName            = "/user.User/GetUserById"
	User_ChangeUserPwd_FullMethodName          = "/user.User/ChangeUserPwd"
	User_ChangeUserNickname_FullMethodName     = "/user.User/ChangeUserNickname"
	User_CreateUserAddrsById_FullMethodName    = "/user.User/CreateUserAddrsById"
	User_GetUserAddrsById_FullMethodName       = "/user.User/GetUserAddrsById"
	User_DeleteAddrByAddrId_FullMethodName     = "/user.User/DeleteAddrByAddrId"
	User_IncreaseBalance_FullMethodName        = "/user.User/IncreaseBalance"
	User_GetEmailCode_FullMethodName           = "/user.User/GetEmailCode"
	User_FrozenBalance_FullMethodName          = "/user.User/FrozenBalance"
	User_ReduceFrozenBalance_FullMethodName    = "/user.User/ReduceFrozenBalance"
	User_ComReduceFrozenBalance_FullMethodName = "/user.User/ComReduceFrozenBalance"
	User_GetFrozenInfo_FullMethodName          = "/user.User/GetFrozenInfo"
	User_Login_FullMethodName                  = "/user.User/Login"
	User_JwtAuth_FullMethodName                = "/user.User/JwtAuth"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定义 user 服务
type UserClient interface {
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error)
	GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error)
	ChangeUserPwd(ctx context.Context, in *ChangeUserPwdReq, opts ...grpc.CallOption) (*ChangeUserPwdResp, error)
	ChangeUserNickname(ctx context.Context, in *ChangeUserNicknameReq, opts ...grpc.CallOption) (*ChangeUserNicknameResp, error)
	CreateUserAddrsById(ctx context.Context, in *CreateAddrsByIdReq, opts ...grpc.CallOption) (*CreateAddrsByIdResp, error)
	GetUserAddrsById(ctx context.Context, in *GetAddrsByIdReq, opts ...grpc.CallOption) (*GetAddrsByIdResp, error)
	DeleteAddrByAddrId(ctx context.Context, in *DeleteAddrByAddrIdReq, opts ...grpc.CallOption) (*DeleteAddrByAddrIdResp, error)
	IncreaseBalance(ctx context.Context, in *IncreaseBalanceReq, opts ...grpc.CallOption) (*IncreaseBalanceResq, error)
	GetEmailCode(ctx context.Context, in *GetEmailCodeReq, opts ...grpc.CallOption) (*GetEmailCodeResp, error)
	FrozenBalance(ctx context.Context, in *FrozenBalanceReq, opts ...grpc.CallOption) (*FrozenBalanceResq, error)
	ReduceFrozenBalance(ctx context.Context, in *ReduceFrozenBalanceReq, opts ...grpc.CallOption) (*ReduceFrozenBalanceResp, error)
	ComReduceFrozenBalance(ctx context.Context, in *ReduceFrozenBalanceReq, opts ...grpc.CallOption) (*ReduceFrozenBalanceResp, error)
	GetFrozenInfo(ctx context.Context, in *GetFrozenInfoReq, opts ...grpc.CallOption) (*GetFrozenInfoResp, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	JwtAuth(ctx context.Context, in *JwtAuthReq, opts ...grpc.CallOption) (*JwtAuthResp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResp)
	err := c.cc.Invoke(ctx, User_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByIdResp)
	err := c.cc.Invoke(ctx, User_GetUserById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ChangeUserPwd(ctx context.Context, in *ChangeUserPwdReq, opts ...grpc.CallOption) (*ChangeUserPwdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserPwdResp)
	err := c.cc.Invoke(ctx, User_ChangeUserPwd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ChangeUserNickname(ctx context.Context, in *ChangeUserNicknameReq, opts ...grpc.CallOption) (*ChangeUserNicknameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserNicknameResp)
	err := c.cc.Invoke(ctx, User_ChangeUserNickname_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateUserAddrsById(ctx context.Context, in *CreateAddrsByIdReq, opts ...grpc.CallOption) (*CreateAddrsByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAddrsByIdResp)
	err := c.cc.Invoke(ctx, User_CreateUserAddrsById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserAddrsById(ctx context.Context, in *GetAddrsByIdReq, opts ...grpc.CallOption) (*GetAddrsByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAddrsByIdResp)
	err := c.cc.Invoke(ctx, User_GetUserAddrsById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteAddrByAddrId(ctx context.Context, in *DeleteAddrByAddrIdReq, opts ...grpc.CallOption) (*DeleteAddrByAddrIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAddrByAddrIdResp)
	err := c.cc.Invoke(ctx, User_DeleteAddrByAddrId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) IncreaseBalance(ctx context.Context, in *IncreaseBalanceReq, opts ...grpc.CallOption) (*IncreaseBalanceResq, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncreaseBalanceResq)
	err := c.cc.Invoke(ctx, User_IncreaseBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetEmailCode(ctx context.Context, in *GetEmailCodeReq, opts ...grpc.CallOption) (*GetEmailCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailCodeResp)
	err := c.cc.Invoke(ctx, User_GetEmailCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FrozenBalance(ctx context.Context, in *FrozenBalanceReq, opts ...grpc.CallOption) (*FrozenBalanceResq, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FrozenBalanceResq)
	err := c.cc.Invoke(ctx, User_FrozenBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ReduceFrozenBalance(ctx context.Context, in *ReduceFrozenBalanceReq, opts ...grpc.CallOption) (*ReduceFrozenBalanceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReduceFrozenBalanceResp)
	err := c.cc.Invoke(ctx, User_ReduceFrozenBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ComReduceFrozenBalance(ctx context.Context, in *ReduceFrozenBalanceReq, opts ...grpc.CallOption) (*ReduceFrozenBalanceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReduceFrozenBalanceResp)
	err := c.cc.Invoke(ctx, User_ComReduceFrozenBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetFrozenInfo(ctx context.Context, in *GetFrozenInfoReq, opts ...grpc.CallOption) (*GetFrozenInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFrozenInfoResp)
	err := c.cc.Invoke(ctx, User_GetFrozenInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, User_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) JwtAuth(ctx context.Context, in *JwtAuthReq, opts ...grpc.CallOption) (*JwtAuthResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JwtAuthResp)
	err := c.cc.Invoke(ctx, User_JwtAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility.
//
// 定义 user 服务
type UserServer interface {
	CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error)
	GetUserById(context.Context, *GetUserByIdReq) (*GetUserByIdResp, error)
	ChangeUserPwd(context.Context, *ChangeUserPwdReq) (*ChangeUserPwdResp, error)
	ChangeUserNickname(context.Context, *ChangeUserNicknameReq) (*ChangeUserNicknameResp, error)
	CreateUserAddrsById(context.Context, *CreateAddrsByIdReq) (*CreateAddrsByIdResp, error)
	GetUserAddrsById(context.Context, *GetAddrsByIdReq) (*GetAddrsByIdResp, error)
	DeleteAddrByAddrId(context.Context, *DeleteAddrByAddrIdReq) (*DeleteAddrByAddrIdResp, error)
	IncreaseBalance(context.Context, *IncreaseBalanceReq) (*IncreaseBalanceResq, error)
	GetEmailCode(context.Context, *GetEmailCodeReq) (*GetEmailCodeResp, error)
	FrozenBalance(context.Context, *FrozenBalanceReq) (*FrozenBalanceResq, error)
	ReduceFrozenBalance(context.Context, *ReduceFrozenBalanceReq) (*ReduceFrozenBalanceResp, error)
	ComReduceFrozenBalance(context.Context, *ReduceFrozenBalanceReq) (*ReduceFrozenBalanceResp, error)
	GetFrozenInfo(context.Context, *GetFrozenInfoReq) (*GetFrozenInfoResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	JwtAuth(context.Context, *JwtAuthReq) (*JwtAuthResp, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServer struct{}

func (UnimplementedUserServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServer) GetUserById(context.Context, *GetUserByIdReq) (*GetUserByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserServer) ChangeUserPwd(context.Context, *ChangeUserPwdReq) (*ChangeUserPwdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserPwd not implemented")
}
func (UnimplementedUserServer) ChangeUserNickname(context.Context, *ChangeUserNicknameReq) (*ChangeUserNicknameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserNickname not implemented")
}
func (UnimplementedUserServer) CreateUserAddrsById(context.Context, *CreateAddrsByIdReq) (*CreateAddrsByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserAddrsById not implemented")
}
func (UnimplementedUserServer) GetUserAddrsById(context.Context, *GetAddrsByIdReq) (*GetAddrsByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAddrsById not implemented")
}
func (UnimplementedUserServer) DeleteAddrByAddrId(context.Context, *DeleteAddrByAddrIdReq) (*DeleteAddrByAddrIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAddrByAddrId not implemented")
}
func (UnimplementedUserServer) IncreaseBalance(context.Context, *IncreaseBalanceReq) (*IncreaseBalanceResq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseBalance not implemented")
}
func (UnimplementedUserServer) GetEmailCode(context.Context, *GetEmailCodeReq) (*GetEmailCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailCode not implemented")
}
func (UnimplementedUserServer) FrozenBalance(context.Context, *FrozenBalanceReq) (*FrozenBalanceResq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrozenBalance not implemented")
}
func (UnimplementedUserServer) ReduceFrozenBalance(context.Context, *ReduceFrozenBalanceReq) (*ReduceFrozenBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceFrozenBalance not implemented")
}
func (UnimplementedUserServer) ComReduceFrozenBalance(context.Context, *ReduceFrozenBalanceReq) (*ReduceFrozenBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComReduceFrozenBalance not implemented")
}
func (UnimplementedUserServer) GetFrozenInfo(context.Context, *GetFrozenInfoReq) (*GetFrozenInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrozenInfo not implemented")
}
func (UnimplementedUserServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) JwtAuth(context.Context, *JwtAuthReq) (*JwtAuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JwtAuth not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}
func (UnimplementedUserServer) testEmbeddedByValue()              {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	// If the following call pancis, it indicates UnimplementedUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserById(ctx, req.(*GetUserByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ChangeUserPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserPwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ChangeUserPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ChangeUserPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ChangeUserPwd(ctx, req.(*ChangeUserPwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ChangeUserNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserNicknameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ChangeUserNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ChangeUserNickname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ChangeUserNickname(ctx, req.(*ChangeUserNicknameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateUserAddrsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddrsByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUserAddrsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateUserAddrsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUserAddrsById(ctx, req.(*CreateAddrsByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserAddrsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddrsByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserAddrsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserAddrsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserAddrsById(ctx, req.(*GetAddrsByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteAddrByAddrId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAddrByAddrIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteAddrByAddrId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DeleteAddrByAddrId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteAddrByAddrId(ctx, req.(*DeleteAddrByAddrIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_IncreaseBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).IncreaseBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_IncreaseBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).IncreaseBalance(ctx, req.(*IncreaseBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetEmailCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetEmailCode(ctx, req.(*GetEmailCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FrozenBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrozenBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FrozenBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FrozenBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FrozenBalance(ctx, req.(*FrozenBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ReduceFrozenBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceFrozenBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ReduceFrozenBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ReduceFrozenBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ReduceFrozenBalance(ctx, req.(*ReduceFrozenBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ComReduceFrozenBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceFrozenBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ComReduceFrozenBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ComReduceFrozenBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ComReduceFrozenBalance(ctx, req.(*ReduceFrozenBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetFrozenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrozenInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetFrozenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetFrozenInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetFrozenInfo(ctx, req.(*GetFrozenInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_JwtAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JwtAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).JwtAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_JwtAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).JwtAuth(ctx, req.(*JwtAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _User_GetUserById_Handler,
		},
		{
			MethodName: "ChangeUserPwd",
			Handler:    _User_ChangeUserPwd_Handler,
		},
		{
			MethodName: "ChangeUserNickname",
			Handler:    _User_ChangeUserNickname_Handler,
		},
		{
			MethodName: "CreateUserAddrsById",
			Handler:    _User_CreateUserAddrsById_Handler,
		},
		{
			MethodName: "GetUserAddrsById",
			Handler:    _User_GetUserAddrsById_Handler,
		},
		{
			MethodName: "DeleteAddrByAddrId",
			Handler:    _User_DeleteAddrByAddrId_Handler,
		},
		{
			MethodName: "IncreaseBalance",
			Handler:    _User_IncreaseBalance_Handler,
		},
		{
			MethodName: "GetEmailCode",
			Handler:    _User_GetEmailCode_Handler,
		},
		{
			MethodName: "FrozenBalance",
			Handler:    _User_FrozenBalance_Handler,
		},
		{
			MethodName: "ReduceFrozenBalance",
			Handler:    _User_ReduceFrozenBalance_Handler,
		},
		{
			MethodName: "ComReduceFrozenBalance",
			Handler:    _User_ComReduceFrozenBalance_Handler,
		},
		{
			MethodName: "GetFrozenInfo",
			Handler:    _User_GetFrozenInfo_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "JwtAuth",
			Handler:    _User_JwtAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
