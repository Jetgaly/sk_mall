// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: aggr_order.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AggrOrder_GetOrderInfo_FullMethodName = "/aggrOrder.aggrOrder/GetOrderInfo"
	AggrOrder_GetOrderList_FullMethodName = "/aggrOrder.aggrOrder/GetOrderList"
)

// AggrOrderClient is the client API for AggrOrder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggrOrderClient interface {
	GetOrderInfo(ctx context.Context, in *GetOrderInfoReq, opts ...grpc.CallOption) (*GetOrderInfoResp, error)
	GetOrderList(ctx context.Context, in *GetOrderListReq, opts ...grpc.CallOption) (*GetOrderListResp, error)
}

type aggrOrderClient struct {
	cc grpc.ClientConnInterface
}

func NewAggrOrderClient(cc grpc.ClientConnInterface) AggrOrderClient {
	return &aggrOrderClient{cc}
}

func (c *aggrOrderClient) GetOrderInfo(ctx context.Context, in *GetOrderInfoReq, opts ...grpc.CallOption) (*GetOrderInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderInfoResp)
	err := c.cc.Invoke(ctx, AggrOrder_GetOrderInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggrOrderClient) GetOrderList(ctx context.Context, in *GetOrderListReq, opts ...grpc.CallOption) (*GetOrderListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderListResp)
	err := c.cc.Invoke(ctx, AggrOrder_GetOrderList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggrOrderServer is the server API for AggrOrder service.
// All implementations must embed UnimplementedAggrOrderServer
// for forward compatibility.
type AggrOrderServer interface {
	GetOrderInfo(context.Context, *GetOrderInfoReq) (*GetOrderInfoResp, error)
	GetOrderList(context.Context, *GetOrderListReq) (*GetOrderListResp, error)
	mustEmbedUnimplementedAggrOrderServer()
}

// UnimplementedAggrOrderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAggrOrderServer struct{}

func (UnimplementedAggrOrderServer) GetOrderInfo(context.Context, *GetOrderInfoReq) (*GetOrderInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderInfo not implemented")
}
func (UnimplementedAggrOrderServer) GetOrderList(context.Context, *GetOrderListReq) (*GetOrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderList not implemented")
}
func (UnimplementedAggrOrderServer) mustEmbedUnimplementedAggrOrderServer() {}
func (UnimplementedAggrOrderServer) testEmbeddedByValue()                   {}

// UnsafeAggrOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggrOrderServer will
// result in compilation errors.
type UnsafeAggrOrderServer interface {
	mustEmbedUnimplementedAggrOrderServer()
}

func RegisterAggrOrderServer(s grpc.ServiceRegistrar, srv AggrOrderServer) {
	// If the following call pancis, it indicates UnimplementedAggrOrderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AggrOrder_ServiceDesc, srv)
}

func _AggrOrder_GetOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggrOrderServer).GetOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggrOrder_GetOrderInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggrOrderServer).GetOrderInfo(ctx, req.(*GetOrderInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggrOrder_GetOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggrOrderServer).GetOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggrOrder_GetOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggrOrderServer).GetOrderList(ctx, req.(*GetOrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AggrOrder_ServiceDesc is the grpc.ServiceDesc for AggrOrder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggrOrder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aggrOrder.aggrOrder",
	HandlerType: (*AggrOrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrderInfo",
			Handler:    _AggrOrder_GetOrderInfo_Handler,
		},
		{
			MethodName: "GetOrderList",
			Handler:    _AggrOrder_GetOrderList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aggr_order.proto",
}
