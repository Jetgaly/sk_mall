// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0
// Source: aggr_order.proto

package aggrorder

import (
	"context"

	"sk_mall/rpc/aggr_order/types"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddrInfo         = __.AddrInfo
	BaseResp         = __.BaseResp
	GetOrderInfoReq  = __.GetOrderInfoReq
	GetOrderInfoResp = __.GetOrderInfoResp
	GetOrderListReq  = __.GetOrderListReq
	GetOrderListResp = __.GetOrderListResp
	OrderInfo        = __.OrderInfo
	OrderListElem    = __.OrderListElem
	SkProductInfo    = __.SkProductInfo

	AggrOrder interface {
		GetOrderInfo(ctx context.Context, in *GetOrderInfoReq, opts ...grpc.CallOption) (*GetOrderInfoResp, error)
		GetOrderList(ctx context.Context, in *GetOrderListReq, opts ...grpc.CallOption) (*GetOrderListResp, error)
	}

	defaultAggrOrder struct {
		cli zrpc.Client
	}
)

func NewAggrOrder(cli zrpc.Client) AggrOrder {
	return &defaultAggrOrder{
		cli: cli,
	}
}

func (m *defaultAggrOrder) GetOrderInfo(ctx context.Context, in *GetOrderInfoReq, opts ...grpc.CallOption) (*GetOrderInfoResp, error) {
	client := __.NewAggrOrderClient(m.cli.Conn())
	return client.GetOrderInfo(ctx, in, opts...)
}

func (m *defaultAggrOrder) GetOrderList(ctx context.Context, in *GetOrderListReq, opts ...grpc.CallOption) (*GetOrderListResp, error) {
	client := __.NewAggrOrderClient(m.cli.Conn())
	return client.GetOrderList(ctx, in, opts...)
}
