// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: merchant.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Merchant_CreateMerchant_FullMethodName     = "/merchant.Merchant/CreateMerchant"
	Merchant_GetMerchantByMId_FullMethodName   = "/merchant.Merchant/GetMerchantByMId"
	Merchant_GetMerchantId_FullMethodName      = "/merchant.Merchant/GetMerchantId"
	Merchant_IncreaseBalance_FullMethodName    = "/merchant.Merchant/IncreaseBalance"
	Merchant_ComIncreaseBalance_FullMethodName = "/merchant.Merchant/ComIncreaseBalance"
)

// MerchantClient is the client API for Merchant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantClient interface {
	CreateMerchant(ctx context.Context, in *CreateMerchantReq, opts ...grpc.CallOption) (*CreateMerchantResp, error)
	GetMerchantByMId(ctx context.Context, in *GetMerchantByMIdReq, opts ...grpc.CallOption) (*GetMerchantByMIdResp, error)
	GetMerchantId(ctx context.Context, in *GetMerchantIdReq, opts ...grpc.CallOption) (*GetMerchantIdResp, error)
	IncreaseBalance(ctx context.Context, in *IncreaseBalanceReq, opts ...grpc.CallOption) (*IncreaseBalanceResp, error)
	ComIncreaseBalance(ctx context.Context, in *IncreaseBalanceReq, opts ...grpc.CallOption) (*IncreaseBalanceResp, error)
}

type merchantClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantClient(cc grpc.ClientConnInterface) MerchantClient {
	return &merchantClient{cc}
}

func (c *merchantClient) CreateMerchant(ctx context.Context, in *CreateMerchantReq, opts ...grpc.CallOption) (*CreateMerchantResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMerchantResp)
	err := c.cc.Invoke(ctx, Merchant_CreateMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) GetMerchantByMId(ctx context.Context, in *GetMerchantByMIdReq, opts ...grpc.CallOption) (*GetMerchantByMIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMerchantByMIdResp)
	err := c.cc.Invoke(ctx, Merchant_GetMerchantByMId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) GetMerchantId(ctx context.Context, in *GetMerchantIdReq, opts ...grpc.CallOption) (*GetMerchantIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMerchantIdResp)
	err := c.cc.Invoke(ctx, Merchant_GetMerchantId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) IncreaseBalance(ctx context.Context, in *IncreaseBalanceReq, opts ...grpc.CallOption) (*IncreaseBalanceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncreaseBalanceResp)
	err := c.cc.Invoke(ctx, Merchant_IncreaseBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) ComIncreaseBalance(ctx context.Context, in *IncreaseBalanceReq, opts ...grpc.CallOption) (*IncreaseBalanceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncreaseBalanceResp)
	err := c.cc.Invoke(ctx, Merchant_ComIncreaseBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServer is the server API for Merchant service.
// All implementations must embed UnimplementedMerchantServer
// for forward compatibility.
type MerchantServer interface {
	CreateMerchant(context.Context, *CreateMerchantReq) (*CreateMerchantResp, error)
	GetMerchantByMId(context.Context, *GetMerchantByMIdReq) (*GetMerchantByMIdResp, error)
	GetMerchantId(context.Context, *GetMerchantIdReq) (*GetMerchantIdResp, error)
	IncreaseBalance(context.Context, *IncreaseBalanceReq) (*IncreaseBalanceResp, error)
	ComIncreaseBalance(context.Context, *IncreaseBalanceReq) (*IncreaseBalanceResp, error)
	mustEmbedUnimplementedMerchantServer()
}

// UnimplementedMerchantServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantServer struct{}

func (UnimplementedMerchantServer) CreateMerchant(context.Context, *CreateMerchantReq) (*CreateMerchantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMerchant not implemented")
}
func (UnimplementedMerchantServer) GetMerchantByMId(context.Context, *GetMerchantByMIdReq) (*GetMerchantByMIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantByMId not implemented")
}
func (UnimplementedMerchantServer) GetMerchantId(context.Context, *GetMerchantIdReq) (*GetMerchantIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantId not implemented")
}
func (UnimplementedMerchantServer) IncreaseBalance(context.Context, *IncreaseBalanceReq) (*IncreaseBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseBalance not implemented")
}
func (UnimplementedMerchantServer) ComIncreaseBalance(context.Context, *IncreaseBalanceReq) (*IncreaseBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComIncreaseBalance not implemented")
}
func (UnimplementedMerchantServer) mustEmbedUnimplementedMerchantServer() {}
func (UnimplementedMerchantServer) testEmbeddedByValue()                  {}

// UnsafeMerchantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantServer will
// result in compilation errors.
type UnsafeMerchantServer interface {
	mustEmbedUnimplementedMerchantServer()
}

func RegisterMerchantServer(s grpc.ServiceRegistrar, srv MerchantServer) {
	// If the following call pancis, it indicates UnimplementedMerchantServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Merchant_ServiceDesc, srv)
}

func _Merchant_CreateMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMerchantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).CreateMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Merchant_CreateMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).CreateMerchant(ctx, req.(*CreateMerchantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_GetMerchantByMId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantByMIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).GetMerchantByMId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Merchant_GetMerchantByMId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).GetMerchantByMId(ctx, req.(*GetMerchantByMIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_GetMerchantId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).GetMerchantId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Merchant_GetMerchantId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).GetMerchantId(ctx, req.(*GetMerchantIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_IncreaseBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).IncreaseBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Merchant_IncreaseBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).IncreaseBalance(ctx, req.(*IncreaseBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_ComIncreaseBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).ComIncreaseBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Merchant_ComIncreaseBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).ComIncreaseBalance(ctx, req.(*IncreaseBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Merchant_ServiceDesc is the grpc.ServiceDesc for Merchant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Merchant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "merchant.Merchant",
	HandlerType: (*MerchantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMerchant",
			Handler:    _Merchant_CreateMerchant_Handler,
		},
		{
			MethodName: "GetMerchantByMId",
			Handler:    _Merchant_GetMerchantByMId_Handler,
		},
		{
			MethodName: "GetMerchantId",
			Handler:    _Merchant_GetMerchantId_Handler,
		},
		{
			MethodName: "IncreaseBalance",
			Handler:    _Merchant_IncreaseBalance_Handler,
		},
		{
			MethodName: "ComIncreaseBalance",
			Handler:    _Merchant_ComIncreaseBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant.proto",
}
