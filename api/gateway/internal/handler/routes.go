// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0

package handler

import (
	"net/http"

	login "sk_mall/api/gateway/internal/handler/login"
	merchant "sk_mall/api/gateway/internal/handler/merchant"
	order "sk_mall/api/gateway/internal/handler/order"
	payment "sk_mall/api/gateway/internal/handler/payment"
	product "sk_mall/api/gateway/internal/handler/product"
	seckill "sk_mall/api/gateway/internal/handler/seckill"
	user "sk_mall/api/gateway/internal/handler/user"
	"sk_mall/api/gateway/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/code",
				Handler: login.GetEmailCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: login.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user",
				Handler: login.RegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/merchant",
					Handler: merchant.CreateMerchantHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/order",
					Handler: order.GetOrderListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/order/:no",
					Handler: order.GetOrderInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/payment",
					Handler: payment.PayOrderHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/event",
					Handler: product.CreateEventHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/product",
					Handler: product.CreateProductHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/skproduct",
					Handler: product.CreateSkProductHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/skproduct",
					Handler: product.GetSkProductListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/seckill",
					Handler: seckill.CreateSkOrderHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addr",
					Handler: user.CreateAddrHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/addr",
					Handler: user.DeleteAddrHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/addr",
					Handler: user.GetAddrsHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api"),
	)
}
